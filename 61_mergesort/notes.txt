 Team Tame Meat Mate Meta: Gabriel Thompson, Kartik Vanjani
 APCS pd8
 HW61 -- Instructions so Simple...
 2022-02-08t
 time spent: 1.0 hrs
 
 REFLECTION: 
   HW60:
    - The activity in class today was actually really fun. 
    - It was a more hands on experience and it was fun to have an activity like that teach us the merging sort algorithm.
    - Although the class did not succeed, we did make good progress towards the end.
    - The fact that we should have been left with one card at the end proved to be pretty self-doable.
   HW61:
    - Merge sort was definitely more confusing and non-intuitive to implement than bubble, selection, or insertion sort.
      However, it is probably the most elegant algorithm out of all of them.
    - Merge sort is significantly insanely fast -- it sorted an item of length 1 million in 194ms, according to a test we did.
    - It's really beautiful how despite merge sort using so many separate function calls and so much splitting, the array
      always comes together sorted. It is a completely different perspective from any of the other algorithms we've studied.
 
 OBSERVABLES:
   HW60:
    - At the end, when you return cards to where they came from, you eventually get them back to the people who got the decks.
    - The people who get the deck have to give away cards, but then still end up with one card that they can sort later on.
    - A way to clean up the process is to clearly state that the people who got the decks to start should split it immediately and give it all away.
    - It required significant parallel processing and memory to execute the sorting algorithm.
   HW61:
    - The end case is always an array of length 1.
    - Merge sort handles large arrays extremely well.
    
 DISCO:
   HW60:
    - It was a rough process 100%.
    - Understanding it initially is hard.
    - The ending up with one card is something that eventually just happens.
    - Not having a card is not the worse thing because it is basically like an unused processor. 
   HW61:
    - It is very helpful to walk through the process of one call of sort(). It helps you understand how the recursive aspect
      of merge sort even works, so it's easier to translate to code.
    - We initially tested theorized merge sort on only arrays of lengths that are powers of two. However, the algorithm works
      perfectly fine for arrays of lengths that are not powers of two.
 
 QCC:
   HW60:
    - Does the last person sort the cards?
    - Why should everyone end up with one card?
   HW61:
    - What is the time complexity of merge sort? It is obviously not O(n^2), given how well it handles large arrays.
    - It was mentioned during our discussion of O(n^2) sorting algorithms that computers don't at all use them, but rather use
      a much "faster, smarter algorithm". Is merge sort this algorithm?
    - Is there any faster algorithms than merge sort?
    - Is merge sort a practical way of sorting cards in real life?

 THINKER FIRMWARE:
  - GIVE
  You give away cards if you initially got the deck to begin with.
  - TAKE
  You take cards if you have no cards and you need to get at least one. 
  - MERGE
  You "merge" two received decks, through The Diana Algorithmâ„¢, where you compare the first item from each deck, eliminate it, and move it to a third stack. You repeat this process until one of the decks is empty, at which point you add the remaining cards to the third stack. This third stack is your merged deck.
